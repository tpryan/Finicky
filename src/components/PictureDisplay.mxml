<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" creationComplete="init(event)" cacheAsBitmap="true" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="PictureDisplay">
	
	<fx:Script>
		<![CDATA[
			import com.terrenceryan.finicky.util.AppStorageBitmapImage;
			
			import mx.events.FlexEvent;
			
			import spark.components.Group;
			
			[Bindable]
			private var _source:String = "";
			
			[Bindable]
			public var rotationSeed:String = "Rotation Seed";
			private var actualRotation:Number = 0;
			private var actualTopPadding:int = 0;
			
			[Bindable]
			public var displayHeight:int = 310;
				
			[Bindable]
			public var displayWidth:int = 460;	
			
			private var originaly:int;
			
			public var itemPicture:BitmapImage = new BitmapImage();

			public function get source():String
			{
				return _source;
			}

			public function set source(value:String):void
			{
				_source = value;
			}
			
			
			
			public function placePicture():void
			{
				
				var paperclipy:int = 100;
				if (parentApplication.applicationDPI ==160){
					
					displayWidth = 230;
					displayHeight = 150;
					paperclipy = 50;
				}
				
				calculateRotation();
				calculateTopPadding();
				
				itemPicture.rotation = actualRotation;
				pictureBG.rotation = actualRotation;
				pictureBG.y = originaly + actualTopPadding;
				paperclip.right = 0;
				paperclip.y = pictureBG.y + paperclipy + (2 * actualRotation);
				
				itemPicture.x = pictureBG.x + 5;
				itemPicture.y = pictureBG.y + 5;
			}
			
			private function calculateTopPadding():void{
				var topPadding:int = 0;
				var holder:Number = 0;
				var mod:int = 6;
				
				if (parentApplication.applicationDPI ==160){
					mod = 3;
				}
				
				
				holder = (actualRotation * mod) ;
				
				if (holder < 0){
					holder = 0 - holder; 
				}
				
				topPadding = holder;
				
				actualTopPadding = topPadding;
			}		
			
			
			private function calculateRotation():void{
				var rotation:Number = -14;
				 
				var offset:Number = rotationSeed.length;
				rotation = rotation + offset;
				
				
				if (rotation >= 0){
					rotation = rotation - offset;
				}
				
				if (rotation <= -15){
					rotation = -14;
				} 
				
				trace("Rotation seed " + rotationSeed + " yields " + rotation);
				actualRotation = rotation;
			}
			
			protected function init(event:FlexEvent):void
			{
				createPicture();
				originaly = pictureBG.y;
				placePicture();
				this.width = parent.width;
				
				
			}
			
			protected function createPicture():void
			{
				if (Capabilities.version.indexOf("IOS")){
					itemPicture = new AppStorageBitmapImage();
				}
				else{
					itemPicture = new BitmapImage();
				}
				
				var position:int = getElementIndex(pictureBG);
				
				itemPicture.preliminaryWidth = displayWidth -10;
				itemPicture.preliminaryHeight = displayHeight -10;
				itemPicture.smooth = true;	
				itemPicture.maxWidth=displayWidth -10;
				itemPicture.maxHeight=displayHeight-10; 
				itemPicture.scaleMode="stretch";  
				itemPicture.horizontalCenter=0; 
				itemPicture.source=_source;
				itemPicture.x = pictureBG.x + 5;
				itemPicture.y = pictureBG.y + 5;
				addElementAt(itemPicture,position+1);
			}
			
		]]>
	</fx:Script>
	
	
	
	<s:Rect id="pictureBG" width="{displayWidth}" height="{displayHeight}" horizontalCenter="0">
		<s:stroke>
			<s:SolidColorStroke color="0xFFFFFF" weight="5" />
		</s:stroke>
		<s:fill>
			<s:SolidColor color="0xFFFFFF" />
		</s:fill>
		<s:filters>
			<s:DropShadowFilter color="0x000000" angle="125" distance="6" alpha=".8" />
		</s:filters>
	</s:Rect>
	<s:BitmapImage id="paperclip" source="@Embed('/assets/icons/paperclip.png')"/>
	
	
</s:View>
