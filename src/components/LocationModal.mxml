<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"  
		 xmlns:s="library://ns.adobe.com/flex/spark" xmlns:renderers="renderers.*">
	
	<fx:Metadata>
		[Event(name="placeSelected", type="flash.events.Event")]
		[Event(name="newPlaceRequested", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.terrenceryan.finicky.vo.Place;
			
			import mx.collections.ArrayCollection;
			
			private const BUTTON_PADDING:int = 140;
			
			private var _active:Boolean = true;
			public var place:Place;
			[Bindable]
			public var places:ArrayCollection;
			
			
			[Bindable]
			[Embed(source="/assets/icons/newPlaceUp.png")]
			private var newPlaceUp:Class;
			
			[Bindable]
			[Embed(source="/assets/icons/newPlaceDown.png")]
			private var newPlaceDown:Class;
			
			[Bindable]
			[Embed(source="/assets/icons/pickPlaceUp.png")]
			private var pickPlaceUp:Class;
			
			[Bindable]
			[Embed(source="/assets/icons/pickPlaceDown.png")]
			private var pickPlaceDown:Class;
			
			private var expanded:Boolean = false;
			
			public function get active():Boolean
			{
				return _active;
			}

			public function set active(value:Boolean):void
			{
				_active = value;
				visible = value;
			}

			protected function closeButton_clickHandler(event:MouseEvent):void
			{
				active = false;
				visible = false;
				
			}
			
			protected function clickHandler(event:MouseEvent):void
			{
				
				iconPick.source = pickPlaceUp;
				iconNew.source = newPlaceUp;
				
				if (event.currentTarget.name == "iconPick"){
					iconPick.source = pickPlaceDown;
					placeList.visible = true;
					growPaper.play();
					expanded = true;
				}
				
				if (event.currentTarget.name == "iconNew"){
					iconNew.source = newPlaceDown;
					placeList.visible = false;
					dispatchEvent(new Event("newPlaceRequested") );
					if (expanded){
						shrinkPaper.play();
						expanded = false;
					}
				}
			}
			
			
			protected function placeList_clickHandler(event:MouseEvent):void
			{
				if (placeList.selectedIndex > -1){
					place = placeList.selectedItem;
					dispatchEvent(new Event("placeSelected"));
					active = false;
					
				}
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:Animate id="growPaper" duration="500" target="{scroller}">
			<s:SimpleMotionPath property="height" valueFrom="300" valueTo="{height-20}" />
		</s:Animate>
		
		<s:Animate id="shrinkPaper" duration="500" target="{scroller}">
			<s:SimpleMotionPath property="height" valueTo="300" valueFrom="{height-20}" />
		</s:Animate>
	</fx:Declarations>
	
	
	<s:Rect width="100%" height="100%" alpha=".8">
		<s:fill>
			<s:SolidColor color="0x000000" />
		</s:fill>
	</s:Rect>
	
	
	<s:Group id="mainInterface" left="0" right="0" horizontalCenter="0" verticalCenter="0">
		
		
		
		<s:Scroller id="scroller" horizontalScrollPolicy="off" verticalScrollPolicy="off" width="95%" height="300" horizontalCenter="0" verticalCenter="-100">
			<s:Group clipAndEnableScrolling="true" >
				<s:BitmapImage id="bg" width="554" height="807"  source="@Embed('/assets/bg/bg_modal_long.png')" />
				
				
				
			
				<s:BitmapImage id="iconNew" name="iconNew"  source="{newPlaceUp}" horizontalCenter="0" top="{10}"  click="clickHandler(event)"  />
				<s:BitmapImage id="iconPick" depth="2" name="iconPick" source="{pickPlaceUp}" horizontalCenter="0" top="{iconNew.top + BUTTON_PADDING}"  click="clickHandler(event)"  />
				
				
				<s:List id="placeList" depth="1" visible="false" top="{iconPick.top + BUTTON_PADDING}" horizontalCenter="0" width="90%" bottom="0" 
						dataProvider="{places}" contentBackgroundAlpha="0" click="placeList_clickHandler(event)"  >
					<s:itemRenderer>
						<fx:Component>
							<renderers:ItemListRenderer labelField="name" messageFunction="getCityandState" messageStyleName="locationName" 
														decorator="@Embed('/assets/icons/itemListButtonUp.png')" styleName="itemName">
								<fx:Script>
									<![CDATA[
										protected function getCityandState(obj:Object):String{
											return obj.getRendererLabel();
										}
										
									]]>
								</fx:Script>
							</renderers:ItemListRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:List>	
				
			</s:Group>
		</s:Scroller>
		
		
	
		
		

		
			
		
		
	</s:Group>
	
	
</s:Group>
