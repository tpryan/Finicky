<?xml version="1.0" encoding="utf-8"?>
<s:ViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
							xmlns:s="library://ns.adobe.com/flex/spark" 
							splashScreenImage="@Embed('assets/splash/splash.jpg')"
							splashScreenScaleMode="none" 
							creationComplete="init(event)"
							>
	
	<fx:Style source="main.css" />
	<fx:Script>
		<![CDATA[
			import com.terrenceryan.finicky.DataSingleton;
			import com.terrenceryan.finicky.LocationReconciler;
			import com.terrenceryan.finicky.db.DBManager;
			import com.terrenceryan.finicky.fonts.Liberator;
			import com.terrenceryan.finicky.fonts.LiberatorTLF;
			import com.terrenceryan.finicky.fonts.LionsDen;
			import com.terrenceryan.finicky.fonts.LionsDenTLF;
			import com.terrenceryan.finicky.fonts.Spoleto;
			import com.terrenceryan.finicky.fonts.TradeGothicLTBC;
			import com.terrenceryan.finicky.fonts.TradeGothicLTBCTLF;
			import com.terrenceryan.finicky.fonts.TradeGothicLTStdCn;
			import com.terrenceryan.finicky.fonts.TradeGothicLTStdCnTLF;
			import com.terrenceryan.finicky.fonts.tradegothic;
			import com.terrenceryan.finicky.fonts.tradegothicbold;
			import com.terrenceryan.finicky.fonts.tradegothictlf;
			import com.terrenceryan.finicky.fonts.tradegothictlfbold;
			import com.terrenceryan.finicky.geo.GeoResultEvent;
			import com.terrenceryan.finicky.geo.GoogleGeoCode;
			import com.terrenceryan.finicky.util.StringUtil;
			import com.terrenceryan.finicky.vo.Place;
			
			import flash.sensors.Geolocation;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import views.Demo;
			import views.Landing;
			
			//deleteme
			private var count:Number = new Date().time;
			
			public var dbManager:DBManager = null;
			public var geoCodeService:GoogleGeoCode = new GoogleGeoCode();
			public var dataToPush:DataSingleton = new DataSingleton();
			public var geo:Geolocation;
			public var home:Place;
			public var locationReconciler:LocationReconciler = new LocationReconciler();
			public var closeTimer:Timer;
			public var stringUtils:StringUtil = new StringUtil();
			
			
			protected function init(event:FlexEvent):void
			{
				
				navigator.hideActionBar(false);
				NativeApplication.nativeApplication.addEventListener(Event.DEACTIVATE, onDeactivate);
				NativeApplication.nativeApplication.addEventListener(Event.ACTIVATE, onActivate);
				getFonts();
				var dbFile:File = File.applicationStorageDirectory.resolvePath("finicky.db");
				trace(dbFile.nativePath)
				dbManager = new DBManager(dbFile);
				dataToPush.dbManager = dbManager;
				home = dataToPush.dbManager.currentLocationDBO.get();
				getLocation();
				locationReconciler.reconcile();
				
				onLoaded();
				
			}
			
			
			
			protected function getLocation():void{
				
				
				
				if (Geolocation.isSupported)
				{
					trace("Geolocation supported");
					trace((new Date().time - count) + "ms");
					//Initialize the location sensor.
					geo = new Geolocation();
					dataToPush.geo = geo;
					if(! dataToPush.geo.muted){
						trace("Geolocation is not muted");
						dataToPush.geo.setRequestedUpdateInterval(1000);
						//Register to receive location updates.
						dataToPush.geo.addEventListener(GeolocationEvent.UPDATE, geolocationUpdateHandler);
					}
				}
				else{
					
/* 					if (Capabilities.os.indexOf("Mac") >= 0  ){
						home.lat = 39.962198;
						home.lon = 	-75.1706391;
					}
 */					
					geoCodeService.addEventListener("reverseGeoCodeResult", reverseGeoCodeResultHandler);
					geoCodeService.fromLatLonToAddress(home.lat, home.lon);
				}
				
				dataToPush.home = home;
				dataToPush.geo = geo;
				
				
				
			}
			
			protected function onLoaded():void
			{
				
				dataToPush.geoCodeService = geoCodeService;
				dataToPush.os = Capabilities.version;
				dataToPush.locationReconciler = locationReconciler;
				
				if (dataToPush.os.indexOf("IOS") >= 0){
					dataToPush.softControls = true;
				}
				else if (dataToPush.os.indexOf("QNX") >= 0){
					dataToPush.softControls = true;
				}
				else if (dataToPush.os.indexOf("AND") >= 0){
					dataToPush.softControls = false;
				}
				else{
					dataToPush.softControls = false;
				}
				
				
				navigator.pushView(views.Landing, dataToPush);
				
				/* Will need later if I can get mapping to work on IOS.  */
				/* if (dataToPush.os.indexOf("IOS") >= 0){
					navigator.pushView(views.IOSLanding, dataToPush);
				}
				else{
					navigator.pushView(views.Landing, dataToPush);
				} */
				
			}
			
			private function getFonts():void
			{
				var myFont1:Font = new Spoleto as Font;
				var myFont2:Font = new LionsDen as Font;
				var myFont3:Font = new tradegothic as Font;
				var myFont4:Font = new LionsDenTLF as Font;
				var myFont5:Font = new tradegothictlf as Font;
				var myFont6:Font = new tradegothicbold as Font;
				var myFont7:Font = new tradegothictlfbold as Font;
				var myFont8:Font = new Liberator as Font;
				var myFont9:Font = new LiberatorTLF as Font;
				var myFont10:Font = new TradeGothicLTBC as Font;
				var myFont11:Font = new TradeGothicLTBCTLF as Font;
				var myFont12:Font = new TradeGothicLTStdCn as Font;
				var myFont13:Font = new TradeGothicLTStdCnTLF as Font;
				
				var fonts:Array = Font.enumerateFonts();
				
				for each (var key:Font in fonts)
				{
					trace(key.fontName + " - " + key.fontStyle + " - " + key.fontType);
				}
			}
			
			protected function geolocationUpdateHandler(event:GeolocationEvent):void
			{
				trace("Geolocation Event Fired");
				geo.setRequestedUpdateInterval(300000);
				home.lat = event.latitude;
				home.lon = event.longitude;
				geoCodeService.addEventListener("reverseGeoCodeResult", reverseGeoCodeResultHandler);
				geoCodeService.fromLatLonToAddress(home.lat, home.lon);
				
			}
			
			protected function reverseGeoCodeResultHandler(event:GeoResultEvent):void
			{
				trace("Google Calls returned");
				trace(event.result.address);
				trace(event.result.city);
				trace(event.result.state);
				trace(event.result.mailingCode);
				
				geoCodeService.removeEventListener("reverseGeoCodeResult", reverseGeoCodeResultHandler);

				var place:Place = new Place();
				place.address = stringUtils.toTitleCase(event.result.address);
				place.city = event.result.city;
				place.state = event.result.state;
				place.mailingCode = event.result.mailingCode;
				place.country = event.result.country;
				place.lat = event.result.lat;
				place.lon = event.result.lon;
				dataToPush.home = place;
				
				geoCodeService.addEventListener("alternativesResult", processAlternatives);
				geoCodeService.getAlternativeLocations(place);
			}
			
			protected function processAlternatives(event:GeoResultEvent):void
			{
				geoCodeService.removeEventListener("alternativesResult", processAlternatives);
				var ac:ArrayCollection = event.result as ArrayCollection;
				dataToPush.homeAlternatives = ac;
				
			}
			
			protected function onDeactivate(event:Event):void
			{
				if (dataToPush.allowToClose){
					closeTimer = new Timer(600000,1);
					closeTimer.addEventListener(TimerEvent.TIMER_COMPLETE, closeApp);
					closeTimer.start();
					dataToPush.geo = null;
				}
				else{
					closeTimer = new Timer(600000,1);
					closeTimer.addEventListener(TimerEvent.TIMER_COMPLETE, closeApp);
					closeTimer.start();
					dataToPush.geo = null;
				}
			}
			
			protected function closeApp(event:Event):void{
				NativeApplication.nativeApplication.exit();
			}
			
			
			protected function onActivate(event:Event):void{
				dataToPush.allowToClose = true;
				closeTimer = null;
				dataToPush.geo = new Geolocation();
				dataToPush.geo.setRequestedUpdateInterval(100);
				dataToPush.geo.addEventListener(GeolocationEvent.UPDATE, geolocationUpdateHandler);
			}
			
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
</s:ViewNavigatorApplication>
