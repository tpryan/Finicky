<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" keyDown="keyPress(event)" creationComplete="init(event)"   
		xmlns:s="library://ns.adobe.com/flex/spark" title="" actionBarVisible="false" 
		xmlns:components="components.*" xmlns:renderers="renderers.*">
	
	<fx:Script>
		<![CDATA[
			import com.terrenceryan.finicky.DataSingleton;
			import com.terrenceryan.finicky.db.DBManager;
			import com.terrenceryan.finicky.geo.GeoCode;
			import com.terrenceryan.finicky.vo.Place;
			
			import events.GeoResultEvent;
			
			import flash.sensors.Geolocation;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			protected var currentCity:int = 0;
			protected var dataToPush:DataSingleton;
			public var i:int = 0;
			protected var dbManager:DBManager;
			protected var geoCodeService:GeoCode;
			protected var geo:Geolocation;
			
			[Bindable]
			protected var itemAtPlaceList:ArrayCollection;
			
			[Bindable]
			protected var home:Place; 
			
			
			protected function init(event:FlexEvent):void
			{
				
				dataToPush = data as DataSingleton;
				
				if ( (dataToPush.home) && ((dataToPush.home.lat == 0) && (dataToPush.home.lon == 0)) && (dataToPush.geo) ){
					geo = dataToPush.geo;
					geo.addEventListener(GeolocationEvent.UPDATE, resetList);
				}
				
				home = dataToPush.home;
				
				
				dbManager = dataToPush.dbManager;
				itemAtPlaceList = dbManager.itemAtPlaceDAO.list("distance",dataToPush.home);
				geoCodeService = dataToPush.geoCodeService;
				
				geoCodeService.addEventListener("result", setLocationBanner);
				
				if (dataToPush.geo){
					dataToPush.geo.addEventListener(GeolocationEvent.UPDATE, setLocationBanner);
					dataToPush.geo.addEventListener(GeolocationEvent.UPDATE, filterModal_changedHandler);
				}
				
			
				if (!dataToPush.noticeShown){
					if (dbManager.itemAtPlaceDAO.count() == 0){
						
						startingNotice.open()
						dataToPush.noticeShown = true;	
					}
					else if (itemAtPlaceList.length == 0){
						alert.open(this,true);
						dataToPush.noticeShown = true;	
						
					}
				}
				
				if (itemAtPlaceList.length == 0){
					mapButton.visible = false;
					
				}
				
			}
			
			
			protected function itemList_clickHandler(event:MouseEvent):void
			{
			
				if (itemList.selectedIndex > -1){
					dataToPush.selectedIndex = itemList.selectedIndex;
					dataToPush.itemAtPlaceList = itemAtPlaceList;
					navigator.pushView(Detail, dataToPush);
				}
			}
			
			protected function keyPress(event:KeyboardEvent):void
			{
				trace(event.keyCode);
				
				
				if (event.keyCode == Keyboard.BACK){
					
					event.preventDefault();
					
					if (filterModal.active){
						filterModal.active = false;
						filterModal.visible = false;
					} 
				}
				
				
				
			}
			
			protected function locationInterface_filterClickedHandler(event:Event):void
			{
				filterModal.active = true;
				filterModal.visible = true;
				
			}
			
			
			
			protected function addButton_clickHandler(event:MouseEvent):void
			{
				dataToPush.selectedIndex = -1;
				navigator.pushView(Edit, dataToPush);
				
			}
			
			protected function filterModal_changedHandler(event:Event):void
			{
				if (filterModal.filterType == "place"){
					itemAtPlaceList = dbManager.itemAtPlaceDAO.list("distance",dataToPush.home);
				}
				else{
					itemAtPlaceList = dbManager.itemAtPlaceDAO.list("item.name",dataToPush.home);
				}
				
			}
			
			protected function mapButton_clickHandler(event:MouseEvent):void
			{
				
				dataToPush.itemAtPlaceList = itemAtPlaceList;
				navigator.pushView(MapView, dataToPush);
				
			}
			
			protected function setLocationBanner(event:GeoResultEvent):void
			{
				locationInterface.location = dataToPush.home.toCityStateString();
				
			}
			
			protected function settingsButton_clickHandler(event:MouseEvent):void
			{
				navigator.pushView(Settings, dataToPush);
				
			}
			
			protected function resetList(event:GeolocationEvent):void
			{
				filterModal_changedHandler(null);
				
			}
			
			protected function alert_closedHandler(event:Event):void
			{
				mx.core.FlexGlobals.topLevelApplication.viewMenuOpen = true;				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<components:Alert id="alert" message="{alertText}" left="0" right="0" closed="alert_closedHandler(event)" />
	
		<fx:String id="alertText">You don't have any Finicky matches nearby. 

How's about you add some?</fx:String>
		
	
	</fx:Declarations>
	
	
	<s:List id="itemList" left="0" right="0" top="310" bottom="0" dataProvider="{itemAtPlaceList}" contentBackgroundAlpha="0" click="itemList_clickHandler(event)">
		<s:itemRenderer>
			<fx:Component>
				<renderers:ItemListRenderer  styleName="itemName" messageStyleName="locationName" labelFunction="getItemName"
										decorator="@Embed('/assets/icons/itemListButtonUp.png') "
										messageFunction="upperLocation" 
										>
					<fx:Script>
						<![CDATA[
							import com.terrenceryan.finicky.vo.Place;
							protected function upperLocation(obj:Object):String{
								var result:String = "";
								result = obj.place.name.toUpperCase() + " (" + obj.place.getDistanceInHumanForm() +")"; 
								return result;
							}
							
							protected function getItemName(obj:Object):String{
								return obj.item.name;
							}
						]]>
					</fx:Script>
					
				</renderers:ItemListRenderer>
			</fx:Component>
			
		</s:itemRenderer>
	</s:List>

	<components:Location id="locationInterface" filterClicked="locationInterface_filterClickedHandler(event)" location="{dataToPush.home.toCityStateString()}"  />

	<components:FilterModal id="filterModal" visible="false" width="100%" changed="filterModal_changedHandler(event)" />
	
	<components:StartingNotice id="startingNotice" width="100%" height="100%" />
	
	<s:viewMenuItems>
		<s:ViewMenuItem id="addButton" label="ADD" skinClass="skins.DetailsViewMenuItemSkin" click="addButton_clickHandler(event)"  />
		<s:ViewMenuItem id="mapButton" label="MAP" skinClass="skins.DetailsViewMenuItemSkin" click="mapButton_clickHandler(event)" />
		<s:ViewMenuItem id="settingsButton" label="SETTINGS" skinClass="skins.DetailsViewMenuItemSkin" click="settingsButton_clickHandler(event)" />
		<s:ViewMenuItem id="holder" label=" " skinClass="skins.DetailsViewMenuItemSkin"  />
	</s:viewMenuItems>
	
	
	
</s:View>
