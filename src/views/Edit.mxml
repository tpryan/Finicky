<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" actionBarVisible="false" 
		creationComplete="init(event)" keyDown="keyPress(event)"
		xmlns:s="library://ns.adobe.com/flex/spark" title="Edit" xmlns:components="components.*">
	
	<fx:Script>
		<![CDATA[
			import com.terrenceryan.finicky.db.DBManager;
			import com.terrenceryan.finicky.vo.Item;
			import com.terrenceryan.finicky.vo.ItemAtPlace;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.transitions.SlideViewTransition;
			
			private var scrolledDown:Boolean = false;
			
			[Bindable]
			protected var dataToPush:Object = new Object;
			protected var dbManager:DBManager;
			
			protected var cameraUI:CameraUI = new CameraUI();
			
			[Bindable]
			protected var items:ArrayCollection = new ArrayCollection();
			[Bindable]
			protected var places:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			protected var itemAtPlace:ItemAtPlace;
			
			protected function init(event:FlexEvent):void
			{
				dataToPush = data;
				dbManager = data.dbManager;
				cameraUI.addEventListener(MediaEvent.COMPLETE, onCameraReturn);
				items = dbManager.itemDAO.list();
				places = dbManager.placeDAO.list();
				
				if (data.itemToPlaceInProgress){
					locationModal.place = data.place;
					itemTexInput.text = data.itemName;
					locationModal_placeSelectedHandler(null);
					data.itemToPlaceInProgress = null;
					data.place = null;
					data.itemName = null;
				}
				
				if (data.itemAtPlace){
					itemAtPlace = data.itemAtPlace;
					locationModal_placeSelectedHandler(null);
				}
				else{
					itemAtPlace = new ItemAtPlace();
					itemAtPlace.place = data.home;
				}
				
				
			}
			
			protected function writeButton_clickHandler(event:MouseEvent):void
			{
				animateDown.play();
				scrolledDown = true;
			}
			
			
			
			protected function cameraButton_clickHandler(event:MouseEvent):void
			{
				cameraUI.launch("image");
				
			}
			
			protected function onCameraReturn(event:MediaEvent):void
			{
				cameraButton.photo = event.data.file.url;
				
			}
			
			protected function saveButton_clickHandler(event:MouseEvent):void
			{
				
				var item:Item = new Item();
				
				item = dbManager.itemDAO.getItemByName(itemTexInput.text);
				
				if (!item || !item.itemid || item.itemid == 0){
					item = new Item();
					item.name = itemTexInput.text;
				}
				
				
				var itemAtPlace:ItemAtPlace = new ItemAtPlace();
				itemAtPlace.place = locationModal.place;
				itemAtPlace.item = item;
				itemAtPlace.date = new Date();
				itemAtPlace.picturepath = cameraButton.photo;
				itemAtPlace.notes = notepad.text;
				
				dbManager.itemAtPlaceDAO.save(itemAtPlace);
				alert.message = "Your match has been saved. ";
				alert.open(this, true);
				
			}
			
			protected function keyPress(event:KeyboardEvent):void
			{
				trace(event.keyCode);
				
				if (event.keyCode == Keyboard.BACK){
					
					if (scrolledDown == true){
						event.preventDefault();
						animateUp.play();
						scrolledDown = false;
					}
				}
				
				
				
			}
			
			protected function locationButton_clickHandler(event:MouseEvent):void
			{
				locationModal.active = true;
				
			}
			
			protected function locationModal_placeSelectedHandler(event:Event):void
			{
				var boxThreshold:int = 19;
				
				if (locationModal.place){
					if (locationModal.place.name.length < boxThreshold){
						locationButton.label = locationModal.place.name;
					}
					else{
						var text:String = locationModal.place.name.slice(0,boxThreshold -3);
						text = text.concat("...");
						locationButton.label = text;
					}
				}
			}
			
			protected function locationModal_newPlaceRequestedHandler(event:Event):void
			{
				dataToPush.place = data.home;
				dataToPush.itemName = itemTexInput.text;
				dataToPush.itemToPlaceInProgress = true;
				navigator.pushView(PlaceEdit,dataToPush);
				
			}
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<components:Alert id="alert" />
		<s:Animate id="animateDown" target="{scrollerContent}">
			<s:SimpleMotionPath property="verticalScrollPosition" valueTo="700" />
		</s:Animate>
		
		<s:Animate id="animateUp" target="{scrollerContent}">
			<s:SimpleMotionPath property="verticalScrollPosition" valueTo="0" />
		</s:Animate>
	</fx:Declarations>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		
		#editItemLabel, #editLocationLabel{
			fontFamily: "Liberator";
			fontSize: 40;
			color: #21211A;
		}
		
	</fx:Style>
	
	<s:Scroller id="pageScroller" width="100%" height="100%" horizontalScrollPolicy="off">
		<s:Group id="scrollerContent" clipAndEnableScrolling="true">
			
			<s:Image id="bg" source="@Embed('/assets/bg/bg_detail.jpg')" horizontalCenter="0" />
			
			
			<s:Image id="tape" source="@Embed('/assets/bg/editTape.png')"  y="350" />
			
			<s:Label id="editItemLabel" top="10" width="100%" horizontalCenter="0" 
					 text="WHAT DID YOU FIND?" textAlign="center"/>
			<components:SuggestionTextBox id="itemTexInput" suggestionPool="{items}" depth="20"
										  top="61" width="100%" horizontalCenter="0" text="{itemAtPlace.item.name}"
										  textAlign="center" focusThickness="0"
										  />
			
			<s:Label id="editLocationLabel" top="170" width="100%" horizontalCenter="0"
					 text="WHERE DID YOU FIND IT?" textAlign="center"/>
			<s:Button id="locationButton" top="205" label="Pick Location" horizontalCenter="-0" click="locationButton_clickHandler(event)"
					  skinClass="skins.EditLocationButtonSkin"/>
			
			
			
			<components:LocationModal id="locationModal" width="100%" height="100%" depth="50" place="{itemAtPlace.place}" places="{places}" visible="false" 
									  placeSelected="locationModal_placeSelectedHandler(event)" newPlaceRequested="locationModal_newPlaceRequestedHandler(event)" />
			
			
			<components:PhotoButton id="cameraButton" top="355" horizontalCenter="-122" photo="{itemAtPlace.picturepath}" click="cameraButton_clickHandler(event)"  />
			<components:WriteButton id="writeButton" top="355" horizontalCenter="122" click="writeButton_clickHandler(event)" />
			
			
			<components:NotePad id="notepad" text="{itemAtPlace.notes}" top="700" height="{height}" width="100%"  />
			
		</s:Group>
	</s:Scroller>
	
	
	<s:viewMenuItems>
		<s:ViewMenuItem id="saveButton" label="SAVE" skinClass="skins.DetailsViewMenuItemSkin" click="saveButton_clickHandler(event)"  />
		<s:ViewMenuItem id="mapButton" label=" " skinClass="skins.DetailsViewMenuItemSkin" />
		
	</s:viewMenuItems>
		
	
</s:View>
