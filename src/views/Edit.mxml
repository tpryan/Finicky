<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" actionBarVisible="{data.softControls}"
		creationComplete="init(event)" keyDown="keyPress(event)"
		xmlns:s="library://ns.adobe.com/flex/spark" title="Edit" xmlns:components="components.*">
	
	<fx:Script>
		<![CDATA[
			import com.terrenceryan.finicky.DataSingleton;
			import com.terrenceryan.finicky.LocationReconciler;
			import com.terrenceryan.finicky.db.DBManager;
			import com.terrenceryan.finicky.geo.GeoResultEvent;
			import com.terrenceryan.finicky.geo.GoogleGeoCode;
			import com.terrenceryan.finicky.util.StringUtil;
			import com.terrenceryan.finicky.vo.Item;
			import com.terrenceryan.finicky.vo.ItemAtPlace;
			import com.terrenceryan.finicky.vo.Place;
			
			import components.TabMenu;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.graphics.codec.JPEGEncoder;
			
			import spark.transitions.SlideViewTransition;
			
			private var scrolledDown:Boolean = false;
			
			[Bindable]
			protected var dataToPush:DataSingleton;
			protected var dbManager:DBManager;
			
			protected var cameraUI:CameraUI = new CameraUI();
			
			[Bindable]
			protected var items:ArrayCollection = new ArrayCollection();
			[Bindable]
			protected var places:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			protected var itemAtPlace:ItemAtPlace;
			
			[Bindable]
			protected var alternatives:ArrayCollection;
			
			protected var stringUtils:StringUtil = new StringUtil();
			protected var tabMenu:TabMenu;
			
			
			[Bindable]
			protected var editItemLabelY:int = 10;
			[Bindable]
			protected var itemTextInputY:int = 61;
			[Bindable]
			protected var editLocationLabelY:int = 170;
			[Bindable]
			protected var placeTextInputY:int = 210;
			[Bindable]
			protected var locationButtonY:int = 300;
			
			
			[Bindable]
			protected var buttonY:int = 450;
			[Bindable]
			protected var buttonHC:int = 122;
			[Bindable]
			protected var noteY:int = 750;
			[Bindable]
			protected var noteTextY:int = 700;
			
			[Bindable]
			protected var mpLoader:Loader;
			
			protected function init(event:FlexEvent):void
			{
				
				if (parentApplication.applicationDPI == 160){
					editItemLabelY = 5;
					itemTextInputY = 30;
					
					editLocationLabelY = 85;
					placeTextInputY = 105;
					
					locationButtonY = 150;
					
					buttonY = 225;
					buttonHC = 61;
					noteY = 375;
					noteTextY = 375;
				}
				
				dataToPush = data as DataSingleton;
				dbManager = data.dbManager;
				cameraUI.addEventListener(MediaEvent.COMPLETE, onCameraReturn);
				items = dbManager.itemDAO.list();
				places = dbManager.placeDAO.list();
				alternatives = dataToPush.homeAlternatives;
				
				if (data.itemToPlaceInProgress){
					locationSelector.place = dataToPush.place as Place;
					itemTextInput.text = dataToPush.itemName;
					placeTextInput.text = dataToPush.placeName;
					data.itemToPlaceInProgress = null;
					data.place = null;
					data.itemName = null;
					itemAtPlace = dataToPush.itemAtPlace;
				}
				else if (data.itemAtPlace){
					itemAtPlace = dataToPush.itemAtPlace;
				}
				else{
					itemAtPlace = new ItemAtPlace();
					itemAtPlace.place = dataToPush.home.clone();
				}
				
				
				if (dataToPush.displayNotice){
					//notice.open(this, false);
					dataToPush.displayNotice = false;
				}
				
				if (!dataToPush.softControls){
					addTabMenu();
				}
				
			}
			
			protected function writeButton_clickHandler(event:MouseEvent):void
			{
				animateDown.play();
				scrolledDown = true;
				focusManager.setFocus(notepad.contentArea);
			}
			
			
			
			protected function cameraButton_clickHandler(event:MouseEvent):void
			{
				dataToPush.allowToClose = false;
				cameraUI.launch("image");
				
			}
			
			protected function onCameraReturn(event:MediaEvent):void
			{
				if (dataToPush.os.indexOf("IOS") >= 0){
					var cameraUI:CameraUI = event.target as CameraUI;
					cameraUI.removeEventListener(MediaEvent.COMPLETE, onCameraReturn);
					
					var mediaPromise:MediaPromise = event.data;
					
					this.mpLoader = new Loader();
					this.mpLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onMediaPromiseLoaded);
					this.mpLoader.loadFilePromise(mediaPromise);
				}
				else{
					cameraButton.photo = event.data.file.url;
				}
				
				dataToPush.allowToClose = true;
				
				
				
				trace("Camera Returned");
				
			}
			
			protected function onMediaPromiseLoaded(e:Event):void
			{
				
				trace("Media Promise Loaded");
				var mpLoaderInfo:LoaderInfo = e.target as LoaderInfo;
				mpLoaderInfo.removeEventListener(Event.COMPLETE, onMediaPromiseLoaded);
				
				var bitMap:BitmapData = new BitmapData(loaderInfo.width,loaderInfo.height);
				bitMap.draw( mpLoaderInfo.content);
				
				
				var pictureName:String = itemTextInput.text + "_" + placeTextInput.text + ".jpg";
				trace("Start Encoding:" +  new Date());
				
				var imgByteArray:ByteArray = mpLoaderInfo.bytes;
				var fl:File = File.applicationStorageDirectory.resolvePath(pictureName);
				var fs:FileStream = new FileStream();
				trace("Finish Encoding:" +  new Date());
				
				try{
					trace("Start Write:" +  new Date());
					//open file in write mode
					fs.open(fl,FileMode.WRITE);
					//write bytes from the byte array
					fs.writeBytes(imgByteArray);
					//close the file
					fs.close();
					trace("Finish Write:" +  new Date());
				}catch(e:Error){
					trace("Error");
				}
				trace(new Date());
				cameraButton.rawBitmapData = bitMap;
				cameraButton.photo = "file://" + fl.nativePath;
				trace(fl.nativePath);
				trace(fl.url);
				trace("file://" + fl.nativePath);
				trace(fl.size);
				
			}
			
			
			
			
			protected function saveButton_clickHandler(event:Event):void
			{
				
				var item:Item = new Item();
				
				item = dbManager.itemDAO.getItemByName(itemTextInput.text);
				
				if (!item || !item.itemid || item.itemid == 0){
					item = new Item();
					item.name = itemTextInput.text;
				}
				
				var place:Place = locationSelector.place;
				
				if (!place || !place.placeid || place.placeid == 0){
					place.name = stringUtils.toTitleCase(placeTextInput.text);
					dbManager.placeDAO.save(place);
					place.placeid = dbManager.placeDAO.getLastRecordID();
				}
				
				
				var itemAtPlace:ItemAtPlace = new ItemAtPlace();
				itemAtPlace.place = place;
				itemAtPlace.item = item;
				itemAtPlace.date = new Date();
				itemAtPlace.picturepath = cameraButton.photo;
				itemAtPlace.notes = notepad.text;
				
				dbManager.itemAtPlaceDAO.save(itemAtPlace);

				if (itemAtPlace.place.lat == 0){ 
					var geoCodeService:GoogleGeoCode = new GoogleGeoCode();
					geoCodeService.placeid = place.placeid;
					geoCodeService.addEventListener("geoCodeResult", processResult);
					
					geoCodeService.fromAddressToLatLon(itemAtPlace.place);
					trace("Place without a geocode.");
					var lr:LocationReconciler = new LocationReconciler();
					lr.reconcile();
				}
				
				data.displayNotice = true;
				navigator.popView();	
				
			}
			
			protected function processResult(event:GeoResultEvent):void
			{
				var place:Place = dbManager.placeDAO.get(event.placeid);
				place.lat = event.result.lat;
				place.lon = event.result.lon	;
				dbManager.placeDAO.save(place);
				
			}
			
			protected function keyPress(event:KeyboardEvent):void
			{
				trace(event.keyCode);
				
				if (event.keyCode == Keyboard.BACK){
					
					if (locationSelector.active){
						event.preventDefault();
						locationSelector.active = false;
					}
					
					if (scrolledDown == true){
						event.preventDefault();
						animateUp.play();
						scrolledDown = false;
					}
				}
				
			}
			
			protected function locationSelector_newItemRequestedHandler(event:Event):void
			{
				dataToPush.place = data.home;
				dataToPush.itemName = itemTextInput.text;
				dataToPush.placeName = placeTextInput.text;
				dataToPush.itemToPlaceInProgress = true;
				navigator.pushView(AddressEdit,dataToPush);
				
			}
			
			protected function placeTextInput_itemSelectedHandler(event:Event):void
			{
				locationSelector.place = placeTextInput.selectedItem as Place;
				
			}
			
			
			protected function tabMenu_rightClickHandler(event:Event):void
			{
				navigator.popView();
				
			}
			
			protected function locationSelector_activeOnHandler(event:Event):void
			{
				if (tabMenu){
					tabMenu.visible = false;
				}
			}
			
			protected function locationSelector_activeOffHandler(event:Event):void
			{
				if (tabMenu){
					tabMenu.visible = true;
				}
			}
			
			protected function locationButton_clickHandler(event:MouseEvent):void
			{
				locationSelector.active = true;
				
			}
			
			protected function addTabMenu():void{
				var tabMenu:TabMenu = new TabMenu();
				tabMenu.active=true; 
				tabMenu.bottom=0; 
				tabMenu.leftButtonText="SAVE"; 
				tabMenu.rightButtonText="CANCEL";
				tabMenu.addEventListener("leftClick", saveButton_clickHandler);
				tabMenu.addEventListener("rightClick", tabMenu_rightClickHandler);
				this.addElement(tabMenu);
			}
			
			
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<!--<components:Notice id="notice" text="Address Set." verticalCenter="0" horizontalCenter="0" />-->
		<s:Animate id="animateDown" target="{scrollerContent}">
			<s:SimpleMotionPath property="verticalScrollPosition" valueTo="{noteTextY}" />
		</s:Animate>
		
		<s:Animate id="animateUp" target="{scrollerContent}">
			<s:SimpleMotionPath property="verticalScrollPosition" valueTo="0" />
		</s:Animate>
		
		<s:GlowFilter id="textShadow" alpha=".4" color="0x13C7E1" strength="1" />
	</fx:Declarations>
	
	
	
	
	<s:Scroller id="pageScroller" width="100%" height="100%" horizontalScrollPolicy="off" >
		<s:Group id="scrollerContent" clipAndEnableScrolling="true">
			
			<s:BitmapImage id="bg" source="@Embed('/assets/bg/bg_detail.jpg')" horizontalCenter="0" />
			<s:BitmapImage id="tape" source="@Embed('/assets/bg/editTape.png')"  y="450" />
			
			<s:Label id="editItemLabel" top="{editItemLabelY}" width="100%" horizontalCenter="0"
					 text="WHAT DID YOU FIND?" textAlign="center" filters="{[textShadow]}" />
			
			<s:Label id="editLocationLabel" top="{editLocationLabelY}" width="100%" horizontalCenter="0"
					 text="WHERE DID YOU FIND IT?" textAlign="center" filters="{[textShadow]}" />
			
			<s:Button id="locationButton" top="{locationButtonY}" horizontalCenter="-0" label="{locationSelector.place.address}" width="100%"
					  click="locationButton_clickHandler(event)" />
			
			
			
			<components:SuggestionTextBox id="placeTextInput" suggestionPool="{places}" depth="20" itemSelected="placeTextInput_itemSelectedHandler(event)"
										  top="{placeTextInputY}" width="100%" horizontalCenter="0" text="{itemAtPlace.place.name}"
										  textAlign="center" focusThickness="0"
										  />
			
			<components:SuggestionTextBox id="itemTextInput" suggestionPool="{items}" depth="20"
										  top="{itemTextInputY}" width="100%" horizontalCenter="0" text="{itemAtPlace.item.name}"
										  textAlign="center" focusThickness="0"
										  />
			
			
			<components:PhotoButton id="cameraButton" top="{buttonY}" horizontalCenter="{-buttonHC}" photo="{itemAtPlace.picturepath}" click="cameraButton_clickHandler(event)"  />
			<components:WriteButton id="writeButton" top="{buttonY}" horizontalCenter="{buttonHC}" click="writeButton_clickHandler(event)" />
			
			
			<components:NotePad id="notepad" text="{itemAtPlace.notes}" top="{noteY}" height="{height}" width="100%"  />
			
		</s:Group>
	</s:Scroller>
	
	
	<components:LocationSelector top="0" id="locationSelector" place="{itemAtPlace.place}" horizontalCenter="0" 
								 places="{alternatives}" depth="5"
								 activeOn="locationSelector_activeOnHandler(event)" activeOff="locationSelector_activeOffHandler(event)"
								 newItemRequested="locationSelector_newItemRequestedHandler(event)" />
	
	
	<s:viewMenuItems>
		<s:ViewMenuItem id="saveButton" label="SAVE" click="saveButton_clickHandler(event)"  />
		<s:ViewMenuItem id="mapButton" label=" " />
	</s:viewMenuItems>
	
	<s:navigationContent>
		<s:Button id="backBtn" label="Back" click="navigator.popView()" />
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button id="doneBtn" label="Done" click="saveButton_clickHandler(event)" />
	</s:actionContent>
		
	
</s:View>
