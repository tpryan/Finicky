<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" actionBarVisible="false"
		creationComplete="init(event)" keyDown="keyPress(event)"
		xmlns:s="library://ns.adobe.com/flex/spark" title="Edit" xmlns:components="components.*">
	
	<fx:Script>
		<![CDATA[
			import com.terrenceryan.finicky.DataSingleton;
			import com.terrenceryan.finicky.LocationReconciler;
			import com.terrenceryan.finicky.db.DBManager;
			import com.terrenceryan.finicky.geo.GeoCode;
			import com.terrenceryan.finicky.vo.Item;
			import com.terrenceryan.finicky.vo.ItemAtPlace;
			import com.terrenceryan.finicky.vo.Place;
			
			import events.GeoResultEvent;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.transitions.SlideViewTransition;
			
			private var scrolledDown:Boolean = false;
			
			[Bindable]
			protected var dataToPush:DataSingleton;
			protected var dbManager:DBManager;
			
			protected var cameraUI:CameraUI = new CameraUI();
			
			[Bindable]
			protected var items:ArrayCollection = new ArrayCollection();
			[Bindable]
			protected var places:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			protected var itemAtPlace:ItemAtPlace;
			
			[Bindable]
			protected var alternatives:ArrayCollection;
			
			protected function init(event:FlexEvent):void
			{
				
				
				
				dataToPush = data as DataSingleton;
				dbManager = data.dbManager;
				cameraUI.addEventListener(MediaEvent.COMPLETE, onCameraReturn);
				items = dbManager.itemDAO.list();
				places = dbManager.placeDAO.list();
				alternatives = dataToPush.homeAlternatives;
				
				if (data.itemToPlaceInProgress){
					locationSelector.place = dataToPush.place.clone();
					itemTextInput.text = dataToPush.itemName;
					placeTextInput.text = dataToPush.placeName;
					data.itemToPlaceInProgress = null;
					data.place = null;
					data.itemName = null;
					itemAtPlace = dataToPush.itemAtPlace;
				}
				else if (data.itemAtPlace){
					itemAtPlace = dataToPush.itemAtPlace;
				}
				else{
					itemAtPlace = new ItemAtPlace();
					itemAtPlace.place = dataToPush.home.clone();
				}
				
				
				if (dataToPush.displayNotice){
					notice.open(this, false);
					dataToPush.displayNotice = false;
				}
				
			}
			
			protected function writeButton_clickHandler(event:MouseEvent):void
			{
				animateDown.play();
				scrolledDown = true;
				focusManager.setFocus(notepad.contentArea);
			}
			
			
			
			protected function cameraButton_clickHandler(event:MouseEvent):void
			{
				dataToPush.allowToClose = false;
				cameraUI.launch("image");
				
			}
			
			protected function onCameraReturn(event:MediaEvent):void
			{
				cameraButton.photo = event.data.file.url;
				dataToPush.allowToClose = true;
				
			}
			
			
			protected function saveButton_clickHandler(event:Event):void
			{
				
				var item:Item = new Item();
				
				item = dbManager.itemDAO.getItemByName(itemTextInput.text);
				
				if (!item || !item.itemid || item.itemid == 0){
					item = new Item();
					item.name = itemTextInput.text;
				}
				
				
				var itemAtPlace:ItemAtPlace = new ItemAtPlace();
				itemAtPlace.place = locationSelector.place;
				itemAtPlace.place.name = placeTextInput.text;
				itemAtPlace.item = item;
				itemAtPlace.date = new Date();
				itemAtPlace.picturepath = cameraButton.photo;
				itemAtPlace.notes = notepad.text;
				
				dbManager.itemAtPlaceDAO.save(itemAtPlace);

				if (itemAtPlace.place.lat == 0){ 
					var geoCodeService:GeoCode = new GeoCode();
					geoCodeService.placeid = dbManager.placeDAO.getLastRecordID();
					geoCodeService.addEventListener("result", processResult);
					
					geoCodeService.fromAddressToLatLon(itemAtPlace.place);
					trace("Place without a geocode.");
					var lr:LocationReconciler = new LocationReconciler();
					lr.reconcile();
				}
				
				data.displayNotice = true;
				navigator.popView();	
				
			}
			
			protected function processResult(event:GeoResultEvent):void
			{
				var place:Place = dbManager.placeDAO.get(event.placeid);
				place.lat = event.result.lat;
				place.lon = event.result.lon	;
				dbManager.placeDAO.save(place);
				
			}
			
			protected function keyPress(event:KeyboardEvent):void
			{
				trace(event.keyCode);
				
				if (event.keyCode == Keyboard.BACK){
					
					if (locationSelector.active){
						event.preventDefault();
						locationSelector.active = false;
					}
					
					if (scrolledDown == true){
						event.preventDefault();
						animateUp.play();
						scrolledDown = false;
					}
				}
				
				
				
			}
			
			
			
			
			
			
			protected function locationSelector_newItemRequestedHandler(event:Event):void
			{
				dataToPush.place = data.home;
				dataToPush.itemName = itemTextInput.text;
				dataToPush.placeName = placeTextInput.text;
				dataToPush.itemToPlaceInProgress = true;
				navigator.pushView(AddressEdit,dataToPush);
				
			}
			
			protected function placeTextInput_itemSelectedHandler(event:Event):void
			{
				locationSelector.place = placeTextInput.selectedItem as Place;
				
			}
			
			
			protected function tabMenu_rightClickHandler(event:Event):void
			{
				navigator.popView();
				
			}
			
			protected function locationSelector_activeOnHandler(event:Event):void
			{
				tabMenu.visible = false;
				
			}
			
			protected function locationSelector_activeOffHandler(event:Event):void
			{
				tabMenu.visible = true;
				
			}
			
			protected function locationButton_clickHandler(event:MouseEvent):void
			{
				locationSelector.active = true;
				
			}
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<components:Notice id="notice" text="Address Set." verticalCenter="0" horizontalCenter="0" />
		<s:Animate id="animateDown" target="{scrollerContent}">
			<s:SimpleMotionPath property="verticalScrollPosition" valueTo="700" />
		</s:Animate>
		
		<s:Animate id="animateUp" target="{scrollerContent}">
			<s:SimpleMotionPath property="verticalScrollPosition" valueTo="0" />
		</s:Animate>
		
		<s:GlowFilter id="textShadow" alpha=".4" color="0x13C7E1" strength="1" />
	</fx:Declarations>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		
		#editItemLabel, #editLocationLabel{
			fontFamily: "Liberator";
			fontSize: 40;
			color: #21211A;
		}
		
	</fx:Style>
	
	
	
	<s:Scroller id="pageScroller" width="100%" height="100%" horizontalScrollPolicy="off" >
		<s:Group id="scrollerContent" clipAndEnableScrolling="true">
			
			<s:Image id="bg" source="@Embed('/assets/bg/bg_detail.jpg')" horizontalCenter="0" />
			<s:Image id="tape" source="@Embed('/assets/bg/editTape.png')"  y="450" />
			
			<s:Label id="editItemLabel" top="10" width="100%" horizontalCenter="0"
					 text="WHAT DID YOU FIND?" textAlign="center" filters="{[textShadow]}" />
			
			<s:Label id="editLocationLabel" top="170" width="100%" horizontalCenter="0"
					 text="WHERE DID YOU FIND IT?" textAlign="center" filters="{[textShadow]}" />
			
			<s:Button id="locationButton" top="300" horizontalCenter="-0" label="{locationSelector.place.address}"
					  click="locationButton_clickHandler(event)" />
			
			
			
			<components:SuggestionTextBox id="placeTextInput" suggestionPool="{places}" depth="20" itemSelected="placeTextInput_itemSelectedHandler(event)"
										  top="210" width="100%" horizontalCenter="0" text="{itemAtPlace.place.name}"
										  textAlign="center" focusThickness="0"
										  />
			
			<components:SuggestionTextBox id="itemTextInput" suggestionPool="{items}" depth="20"
										  top="61" width="100%" horizontalCenter="0" text="{itemAtPlace.item.name}"
										  textAlign="center" focusThickness="0"
										  />
			
			
			<components:PhotoButton id="cameraButton" top="450" horizontalCenter="-122" photo="{itemAtPlace.picturepath}" click="cameraButton_clickHandler(event)"  />
			<components:WriteButton id="writeButton" top="450" horizontalCenter="122" click="writeButton_clickHandler(event)" />
			
			
			<components:NotePad id="notepad" text="{itemAtPlace.notes}" top="750" height="{height}" width="100%"  />
			
		</s:Group>
	</s:Scroller>
	<components:TabMenu id="tabMenu" active="true" bottom="0" leftButtonText="SAVE" rightButtonText="CANCEL" leftClick="saveButton_clickHandler(event)" rightClick="tabMenu_rightClickHandler(event)" />
	
	<components:LocationSelector top="0" id="locationSelector" place="{itemAtPlace.place}" horizontalCenter="0" 
								 places="{alternatives}" depth="5"
								 activeOn="locationSelector_activeOnHandler(event)" activeOff="locationSelector_activeOffHandler(event)"
								 newItemRequested="locationSelector_newItemRequestedHandler(event)" />
	
	<s:viewMenuItems>
		<s:ViewMenuItem id="saveButton" label="SAVE" click="saveButton_clickHandler(event)"  />
		<s:ViewMenuItem id="mapButton" label=" " />
	</s:viewMenuItems>
		
	
</s:View>
