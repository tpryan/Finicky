<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"  actionBarVisible="false"
		xmlns:s="library://ns.adobe.com/flex/spark" title="EditLocation"
		creationComplete="init(event)" xmlns:components="components.*"
		>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		#nameText,#addressText,#cityText,#stateText,#mailingcodeText,#countryText{
			focusThickness: 0;
			textAlign: left; 
			
		}
		
		#nameLabel,#addressLabel,#cityLabel,#stateLabel,#mailingcodeLabel,#countryLabel{
			fontFamily: "Trade Gothic LT Std";
			
		}
		
		#titleLabel{
			fontFamily:"Liberator";
			fontSize:40;
			fontWeight:"normal";
			textAlign: center;
			
		}
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import com.terrenceryan.finicky.DataSingleton;
			import com.terrenceryan.finicky.db.DBManager;
			import com.terrenceryan.finicky.geo.GeoCode;
			import com.terrenceryan.finicky.vo.Place;
			
			import events.GeoResultEvent;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import spark.events.TextOperationEvent;
			protected var dbManager:DBManager;
			protected var geoCodeService:GeoCode;
			protected var placeid:int;
			[Bindable]
			protected var place:Place;
			[Bindable]
			private var dataToPush:DataSingleton;
			
			
			protected function keyPress(event:KeyboardEvent):void
			{
				trace(event.keyCode);

				if (event.keyCode == Keyboard.BACK){
					
					navigator.popView();					
				}
				
			}
			
			protected function saveButton_clickHandler(event:MouseEvent):void
			{
				
				dbManager.placeDAO.save(place);	
				placeid = dbManager.placeDAO.getLastRecordID();
				place = dbManager.placeDAO.get(placeid);
				alert.message = "Your place has been saved. ";
				alert.open(this, true);

				
				if (place.lat == 0){ 
					geoCodeService = data.geoCodeService;
					geoCodeService.addEventListener("result", processResult);
					geoCodeService.fromAddressToLatLon(place);
					trace("Place without a geocode.")
				}
			}
			
			protected function init(event:FlexEvent):void
			{
				dataToPush = data as DataSingleton;
				dbManager = data.dbManager;
				
				if (data.place){
					place = data.place.clone();
					titleLabel.text = "Edit Place";	
				}
				else{
					place = new Place();
					titleLabel.text = "New Place";
					deleteButton.visible = false;
				}
				
			}
			
			protected function processResult(event:GeoResultEvent):void
			{
				place.lat = event.result.lat;
				place.lon = event.result.lon;
				place.placeid = placeid;
				data.place = place;
				dbManager.placeDAO.save(place);
				
			}
			
			protected function deleteButton_clickHandler(event:MouseEvent):void
			{
				accept.addEventListener("ok", handleDelete);
				accept.message = "Are you sure you want to delete?"
				accept.open(this,false);
				
			}
			
			protected function handleDelete(event:Event):void
			{
				dbManager.placeDAO.destroy(place);
				navigator.popView();
				
			}
			
			protected function alert_closedHandler(event:Event):void
			{
				data.place = place;
				navigator.popView();
				
			}
			
			protected function cancelButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				navigator.popView();
			}
			
			protected function resetPlace():void
			{
				place.lat = 0;
				place.lon = 0;
				trace("Place Reset");
				
				
			}
			
			protected function changeLocationBtn_updatedHandler(event:Event):void
			{
				place = dataToPush.home.clone();
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<components:Alert id="alert" closed="alert_closedHandler(event)"  />
		<components:AcceptPopUp id="accept" />
	</fx:Declarations>
	
	<s:Scroller width="100%" height="100%" left="5" right="5" top="5" bottom="5">
		<s:Group clipAndEnableScrolling="true">
			<components:ChangeLocationButton id="changeLocationBtn" data="{dataToPush}" top="5" right="5" updated="changeLocationBtn_updatedHandler(event)"   />
		
			<s:VGroup width="100%" >
				
				<s:Label id="titleLabel" text="Add/Edit Place"/>
				
				
				<s:TextInput id="nameText" skinClass="skins.FormTexInputSkin" width="100%" text="@{place.name}" prompt="[Name]" />
				<s:TextInput id="addressText" skinClass="skins.FormTexInputSkin" width="100%"  text="@{place.address}" prompt="[Address]" change="resetPlace()"/>
				<s:TextInput id="cityText" skinClass="skins.FormTexInputSkin" width="100%"  text="@{place.city}" prompt="[City]"  change="resetPlace()"/>
				<s:TextInput id="stateText" skinClass="skins.FormTexInputSkin" width="100%"  text="@{place.state}" prompt="[State]"  change="resetPlace()"/>
				<s:TextInput id="mailingcodeText" skinClass="skins.FormTexInputSkin" width="100%"  text="@{place.mailingCode}" prompt="[Mailing Code]"  change="resetPlace()"/>
				<s:TextInput id="countryText" skinClass="skins.FormTexInputSkin" width="100%"  text="@{place.country}" prompt="[Country]"  change="resetPlace()"/>
				
				
				<s:HGroup width="100%" gap="50" horizontalAlign="center">
					<s:Button id="saveButton" label="SAVE" skinClass="skins.FormButtonSkin" click="saveButton_clickHandler(event)" />
					<s:Button id="cancelButton" label="CANCEL" skinClass="skins.FormButtonSkin" click="cancelButton_clickHandler(event)" />
				</s:HGroup>
				
			</s:VGroup>	
		</s:Group>
		
	</s:Scroller>
	
	<s:viewMenuItems>
		<s:ViewMenuItem id="menuSaveButton" label="SAVE" skinClass="skins.DetailsViewMenuItemSkin" click="saveButton_clickHandler(event)"  />
		<s:ViewMenuItem id="deleteButton" label="DELETE" skinClass="skins.DetailsViewMenuItemSkin" click="deleteButton_clickHandler(event)" />
	</s:viewMenuItems>
</s:View>
