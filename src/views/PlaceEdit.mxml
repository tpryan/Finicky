<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"  actionBarVisible="{data.softControls}" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="EditLocation"
		creationComplete="init(event)" xmlns:components="components.*"
		>
	
	
	<fx:Script>
		<![CDATA[
			import com.terrenceryan.finicky.DataSingleton;
			import com.terrenceryan.finicky.db.DBManager;
			import com.terrenceryan.finicky.geo.GeoResultEvent;
			import com.terrenceryan.finicky.geo.GoogleGeoCode;
			import com.terrenceryan.finicky.vo.Place;
			
			import components.TabMenu;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import spark.components.Label;
			import spark.events.TextOperationEvent;
			protected var dbManager:DBManager;
			protected var geoCodeService:GoogleGeoCode;
			protected var placeid:int;
			[Bindable]
			protected var place:Place;
			[Bindable]
			private var dataToPush:DataSingleton;
			
			
			protected function keyPress(event:KeyboardEvent):void
			{
				trace(event.keyCode);

				if (event.keyCode == Keyboard.BACK){
					
					navigator.popView();					
				}
				
			}
			
			protected function saveButton_clickHandler(event:Event):void
			{
				
				dbManager.placeDAO.save(place);	
				placeid = dbManager.placeDAO.getLastRecordID();
				place = dbManager.placeDAO.get(placeid);
				dataToPush.place = place;

				
				if (place.lat == 0){ 
					geoCodeService = data.geoCodeService;
					geoCodeService.addEventListener("result", processResult);
					geoCodeService.fromAddressToLatLon(place);
					trace("Place without a geocode.")
				}
				
				dataToPush.displayNotice = true;
				navigator.popView();
				
			}
			
			protected function init(event:FlexEvent):void
			{
				dataToPush = data as DataSingleton;
				dbManager = data.dbManager;
				
				if (data.place){
					place = data.place.clone();
					this.title = "Edit Place";	
				}
				else{
					place = new Place();
					this.title = "New Place";
					deleteButton.visible = false;
				}
				
				if (!dataToPush.softControls){
					addTitleLabel();
					addTabMenu();
					
				}
				
				
				
				
			}
			
			
			protected function processResult(event:GeoResultEvent):void
			{
				place.lat = event.result.lat;
				place.lon = event.result.lon;
				place.placeid = placeid;
				data.place = place;
				dbManager.placeDAO.save(place);
				dataToPush.place = place;
				
			}
			
			protected function deleteButton_clickHandler(event:MouseEvent):void
			{
				accept.addEventListener("ok", handleDelete);
				accept.message = "Are you sure you want to delete?"
				accept.open(this,false);
				
			}
			
			protected function handleDelete(event:Event):void
			{
				dbManager.placeDAO.destroy(place);
				navigator.popView();
				
			}
			
			protected function alert_closedHandler(event:Event):void
			{
				data.place = place;
				navigator.popView();
				
			}
			
			protected function cancelButton_clickHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				navigator.popView();
			}
			
			protected function resetPlace():void
			{
				place.lat = 0;
				place.lon = 0;
				trace("Place Reset");
				
				
			}
			
			protected function changeLocationBtn_updatedHandler(event:Event):void
			{
				place = dataToPush.home.clone();
				
			}
			
			protected function addTitleLabel():void{
				var titleLabel:Label = new Label();
				titleLabel.styleName = "titleLabel";
				titleLabel.percentWidth = 100;
				titleLabel.text = this.title;
				editGroup.addElementAt(titleLabel, 0);
			}
			
			protected function addTabMenu():void{
				var tabMenu:TabMenu = new TabMenu();
				tabMenu.active=true; 
				tabMenu.bottom=0; 
				tabMenu.leftButtonText="SAVE"; 
				tabMenu.rightButtonText="CANCEL";
				tabMenu.addEventListener("leftClick", saveButton_clickHandler);
				tabMenu.addEventListener("rightClick", cancelButton_clickHandler);
				this.addElement(tabMenu);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<components:Alert id="alert" closed="alert_closedHandler(event)"  />
		<components:AcceptPopUp id="accept" />
	</fx:Declarations>
	
	<s:Scroller width="100%" height="100%" left="5" right="5" top="5" bottom="5">
		<s:Group clipAndEnableScrolling="true">
			<s:VGroup width="100%" id="editGroup" >
				<!-- Title Label now added in init-->
				<s:TextInput id="nameText" width="100%" text="@{place.name}" prompt="[Name]" />
				<s:TextInput id="addressText" width="100%"  text="@{place.address}" prompt="[Address]" change="resetPlace()"/>
				<s:TextInput id="cityText" width="100%"  text="@{place.city}" prompt="[City]"  change="resetPlace()"/>
				<s:TextInput id="stateText" width="100%"  text="@{place.state}" prompt="[State]"  change="resetPlace()"/>
				<s:TextInput id="mailingcodeText" width="100%"  text="@{place.mailingCode}" prompt="[Mailing Code]"  change="resetPlace()"/>
				<s:TextInput id="countryText" width="100%"  text="@{place.country}" prompt="[Country]"  change="resetPlace()"/>
			</s:VGroup>	
		</s:Group>
		
	</s:Scroller>

	<s:Button id="deleteBtnIOS" visible="{data.softControls}" styleName="iosDelete" label="Delete" click="deleteButton_clickHandler(event)" bottom="5" /> 
	
	<s:viewMenuItems>
		<s:ViewMenuItem id="menuSaveButton" label="SAVE" click="saveButton_clickHandler(event)"  />
		<s:ViewMenuItem id="deleteButton" label="DELETE" click="deleteButton_clickHandler(event)" />
	</s:viewMenuItems>
	
	<s:navigationContent>
		<s:Button id="backBtn" label="Back" click="navigator.popView()" />
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button id="doneBtn" label="Done" click="saveButton_clickHandler(event)" />
	</s:actionContent>
	
</s:View>
