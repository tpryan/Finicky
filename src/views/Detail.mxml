<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" actionBarVisible="false" 
		keyDown="keyPress(event)" gestureSwipe="onSwipte(event)" creationComplete="init(event)" 
		title="Detail" cacheAsBitmap="true" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:components="components.*" 
		xmlns:vo="com.terrenceryan.finicky.vo.*" >
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		#currentViewMenu {
			skinClass: ClassReference("skins.DetailViewMenuSkin");
		}
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import com.terrenceryan.finicky.vo.Item;
			
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.components.supportClasses.StyleableTextField;
			import spark.transitions.SlideViewTransition;
			
			protected var dataToPush:Object;
			[Bindable]
			protected var item:Item = new Item();
			
			protected function init(event:FlexEvent):void
			{
				
				
				dataToPush = data;
				
				if (data.navigating == null){
					dataToPush.navigating = "none";
				}
				var items:ArrayCollection = data.items;
				var itemTemp:Object = items.getItemAt(data.selectedIndex);
				item.name = itemTemp.name;
				
				toggleBannerControls();
				
				directionsBtn.y = itemNav.y + itemNav.height + 20;
			}
			
			
			protected function keyPress(event:KeyboardEvent):void
			{
				trace(event.keyCode);
				
				
				if (event.keyCode == Keyboard.BACK){
					
					if (data.navigating == "left"){
						event.preventDefault();
						dataToPush.selectedIndex++;
						navigator.popView();
					}
					
					if (data.navigating == "right"){
						event.preventDefault();
						dataToPush.selectedIndex--;
						navigator.popView();
					}
				}
				
				
				
			}
			
			
			protected function hardmenu_editClickedHandler(event:Event):void
			{
				navigator.pushView(Edit,item);
				
			}
			
			protected function itemNav_clickLeftHandler(event:Event):void
			{
				
				
				if (data.navigating == "right"){
					dataToPush.selectedIndex--;
					navigator.popView();
				}
				else{
					var trans:SlideViewTransition = new SlideViewTransition();
					trans.direction = "right";
					
					dataToPush.selectedIndex = data.selectedIndex-1;
					dataToPush.navigating = "left";
					navigator.pushView(Detail, dataToPush, null, trans);
				}
				
			}
			
			protected function itemNav_clickRightHandler(event:Event):void
			{
				
				if (data.navigating == "left"){
					dataToPush.selectedIndex++;
					navigator.popView();
				}
				else{
					dataToPush.selectedIndex = data.selectedIndex+1;
					dataToPush.navigating = "right";
					navigator.pushView(Detail, dataToPush);
				}
			}
			
			private function toggleBannerControls():void
			{
				if (data.selectedIndex == 0){
					itemNav.visibleLeft = false;
				}
				else{
					itemNav.visibleLeft = true;
				}
				if (data.selectedIndex == data.items.length -1){
					itemNav.visibleRight = false;
				}
				else{
					itemNav.visibleRight = true;
				}
				
			}
			
			protected function onSwipte(event:TransformGestureEvent):void
			{
				if (event.offsetX == 1){
					itemNav_clickLeftHandler(null);
				}
				else if (event.offsetX == -1){
					itemNav_clickRightHandler(null);
				}
				
			}
			
			protected function directionsBtn_clickHandler(event:MouseEvent):void
			{
				var url:String = "http://maps.google.com/maps?f=d";
				var source:String = "&source=s_d";
				var dest:String = "&daddr=" + store.toAddressString();
				var start:String = "&saddr=" + data.home.toAddressString();
				
				var urlReq:URLRequest = new URLRequest();
				navigateToURL(new URLRequest(url + source + start + dest));
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<vo:Place id="store" name="Holt's" address="1522 Walnut Street" city="Philadelphia" state="PA" 
				   notes="This store pretty much has anything you would ever want. " />
	</fx:Declarations>
	
	<s:Image id="bg" source="@Embed('/assets/bg/bg_detail.jpg')" horizontalCenter="0" />
		
	<s:Button id="directionsBtn" label="DIRECTIONS" z="0" right="30" y="{itemNav.y + itemNav.height + 20}" skinClass="skins.DirectionsButtonSkin" click="directionsBtn_clickHandler(event)" />	
	
	<s:VGroup id="content" left="0" right="0" top="0" bottom="0" gap="10" clipAndEnableScrolling="true">
		<components:ItemNavigator id="itemNav" left="0" right="0" currentItem="{item.name}" clickLeft="itemNav_clickLeftHandler(event)" clickRight="itemNav_clickRightHandler(event)" />
		<s:Label id="storeName" width="440" horizontalCenter="0" text="{store.name}"/>
		<s:Label id="storeAddress"  width="440" horizontalCenter="0" text="{store.address}"/>
		<s:Label id="storeCityStateZip"  width="440" horizontalCenter="0" text="{store.toCityStateZipString()}"/>
		
		<components:PictureDisplay source="/assets/items/{data.selectedIndex}.jpg" rotationSeed="{data.items.getItemAt(data.selectedIndex).name}" />
		<s:Image id="rule" source="/assets/bg/rule.png" horizontalCenter="0" />
		<s:Label id="storeDescription" width="100%" text="{store.notes}"/>
	</s:VGroup>
	
	
	<s:viewMenuItems>
		<s:ViewMenuItem id="addButton" label="ADD" skinClass="skins.DetailsViewMenuItemSkin"  />
		<s:ViewMenuItem id="editButton" label="EDIT" skinClass="skins.DetailsViewMenuItemSkin" click="hardmenu_editClickedHandler(event)" />
		<s:ViewMenuItem id="saveButton" label="SAVE" skinClass="skins.DetailsViewMenuItemSkin" />
		<s:ViewMenuItem id="mapButton" label="MAP" skinClass="skins.DetailsViewMenuItemSkin" />
	</s:viewMenuItems>
	
</s:View>
