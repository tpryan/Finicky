<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" actionBarVisible="{data.softControls}" 
		keyDown="keyPress(event)" gestureSwipe="onSwipte(event)" creationComplete="init(event)" 
		title="" cacheAsBitmap="true" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:components="components.*" 
		xmlns:vo="com.terrenceryan.finicky.vo.*" >
	
	
	<fx:Script>
		<![CDATA[
			import com.terrenceryan.finicky.DataSingleton;
			import com.terrenceryan.finicky.db.DBManager;
			import com.terrenceryan.finicky.fonts.TradeGothicLTBC;
			import com.terrenceryan.finicky.fonts.TradeGothicLTBCTLF;
			import com.terrenceryan.finicky.vo.Item;
			import com.terrenceryan.finicky.vo.ItemAtPlace;
			import com.terrenceryan.finicky.vo.Place;
			
			import components.PictureDisplay;
			
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.components.supportClasses.StyleableTextField;
			import spark.events.ViewNavigatorEvent;
			import spark.transitions.SlideViewTransition;
			
			protected var dataToPush:DataSingleton;
			[Bindable]
			protected var item:Item = new Item();
			[Bindable]
			protected var itemAtPlace:ItemAtPlace = new ItemAtPlace();
			
			[Bindable]
			protected var store:Place = new Place();
			
			protected var dbManager:DBManager;
			
			protected var pictureDisplay:PictureDisplay;
			
			protected function init(event:FlexEvent):void
			{
				
				
				dataToPush = data as DataSingleton;
				
				dbManager = data.dbManager;
				
				if (data.navigating == null){
					dataToPush.navigating = "none";
				}
				var itemAtPlaceList:ArrayCollection = data.itemAtPlaceList;
				itemAtPlace = itemAtPlaceList.getItemAt(data.selectedIndex) as ItemAtPlace;
				itemAtPlace = dbManager.itemAtPlaceDAO.get(itemAtPlace.item.itemid, itemAtPlace.place.placeid);
				
				item = itemAtPlace.item;
				store = itemAtPlace.place;
				
				
				
				toggleBannerControls();
				
				
				if (itemAtPlace.picturepath && itemAtPlace.picturepath.length > 0){
					pictureDisplay = new PictureDisplay();
					pictureDisplay.alpha = 0;
					pictureDisplay.source = itemAtPlace.picturepath;
					content.addElementAt(pictureDisplay, content.getElementIndex(textGroup) + 1);
				
					
					
					pictureDisplay.rotationSeed = item.name;
					pictureDisplay.placePicture();
					addEventListener(ViewNavigatorEvent.VIEW_ACTIVATE, onViewActivate);
				}
				
				if (!itemAtPlace.picturepath || itemAtPlace.picturepath.length < 1 || itemAtPlace.picturepath == "/assets/items/-1.jpg"){
					if (pictureDisplay){
						content.removeElement(pictureDisplay);
					}
				}
				
				if (dataToPush.displayNotice){
					notice.open(this, false);
					dataToPush.displayNotice = false;
				}
				
				
			}
			
			
			protected function keyPress(event:KeyboardEvent):void
			{
				trace(event.keyCode);
				
				
				if (event.keyCode == Keyboard.BACK){
					
					if (dataToPush.lastView == "Landing"){
						event.preventDefault();
						navigator.popToFirstView();
					}
				}
				
				
				
			}
			
			
			protected function hardmenu_editClickedHandler(event:Event):void
			{
				dataToPush.itemAtPlace = itemAtPlace;
				navigator.pushView(Edit,dataToPush);
				
			}
			
			protected function itemNav_clickLeftHandler(event:Event):void
			{
				
				
				var trans:SlideViewTransition = new SlideViewTransition();
				trans.direction = "right";
				
				dataToPush.selectedIndex = data.selectedIndex-1;
				dataToPush.navigating = "left";
				navigator.pushView(Detail, dataToPush, null, trans);
				
			}
			
			protected function itemNav_clickRightHandler(event:Event):void
			{
				
				dataToPush.selectedIndex = data.selectedIndex+1;
				dataToPush.navigating = "right";
				navigator.pushView(Detail, dataToPush);
			}
			
			private function toggleBannerControls():void
			{
				if (data.selectedIndex == 0){
					itemNav.visibleLeft = false;
				}
				else{
					itemNav.visibleLeft = true;
				}
				if (data.selectedIndex == data.itemAtPlaceList.length -1){
					itemNav.visibleRight = false;
				}
				else{
					itemNav.visibleRight = true;
				}
				
			}
			
			protected function onSwipte(event:TransformGestureEvent):void
			{
				if (event.offsetX == 1){
					itemNav_clickLeftHandler(null);
				}
				else if (event.offsetX == -1){
					itemNav_clickRightHandler(null);
				}
				
			}
			
			protected function directionsBtn_clickHandler(event:MouseEvent):void
			{
				dataToPush.allowToClose = false;
				
				var url:String = "http://maps.google.com/maps?f=d";
				var source:String = "&source=s_d";
				var dest:String = "&daddr=" + store.toAddressString();
				var start:String = "&saddr=" + data.home.toAddressString();
				var dirtype:String = "&dirflg=d";
				
				store.otherPlace = data.home;
				
				if (store.distance < 7920){
					dirtype = "&dirflg=w";
				}
				
				
				var urlReq:URLRequest = new URLRequest();
				navigateToURL(new URLRequest(url + source + start + dest + dirtype));
			}
			
			protected function hard_menu_addButton_clickHandler(event:MouseEvent):void
			{
				dataToPush.itemAtPlace = null;
				navigator.pushView(Edit,dataToPush);
				
			}
			
			protected function onViewActivate(event:ViewNavigatorEvent):void
			{
				pictureFade.stop();
				pictureFade.play([pictureDisplay]);
				
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<components:Notice id="notice" text="Match Saved." verticalCenter="0" horizontalCenter="0" />
		<s:Fade id="pictureFade" alphaFrom="0" alphaTo="1" duration="100"  />
	</fx:Declarations>
	
	<s:BitmapImage id="bg" source="@Embed('/assets/bg/bg_detail.jpg')" horizontalCenter="0" />
	
	<s:Scroller left="0" right="0" top="0" bottom="0" horizontalScrollPolicy="off" >
		
		<s:VGroup id="content" gap="0" paddingTop="0" clipAndEnableScrolling="true" width="100%" >
			<components:ItemNavigator id="itemNav" width="100%" currentItem="{item.name}" 
										clickLeft="itemNav_clickLeftHandler(event)" 
										clickRight="itemNav_clickRightHandler(event)" />
			
			<s:HGroup id="textGroup">
				<s:VGroup id="addressInfo" maxWidth="{width - 230}" paddingLeft="50">
					
					<s:Label id="storeName"   horizontalCenter="0" text="{store.name}" width="{width - 230}"/>
					<s:Label id="storeAddress"     horizontalCenter="0" text="{store.address}" width="{width - 230}"/>
					<s:Label id="storeCityStateZip"     horizontalCenter="0" text="{store.toCityStateZipString()}" width="{width - 230}"/>
				</s:VGroup>
				
				<s:Button id="directionsBtn" label="DIRECTIONS" z="0" click="directionsBtn_clickHandler(event)" />	
				
			</s:HGroup>
			
			<s:BitmapImage id="rule" source="@Embed('/assets/bg/rule2.png')" horizontalCenter="0" width="100%" />
			<s:Label id="matchNotes" width="100%" text="{itemAtPlace.notes}"/>
		</s:VGroup>
	</s:Scroller>
	
	
	
	<s:viewMenuItems>
		<s:ViewMenuItem id="addButton" label="ADD" click="hard_menu_addButton_clickHandler(event)"  />
		<s:ViewMenuItem id="editButton" label="EDIT" click="hardmenu_editClickedHandler(event)" />
	</s:viewMenuItems>
	
	<s:navigationContent>
		<s:Button id="backBtn" label="Back" click="navigator.popToFirstView()" />
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button id="editBtn" label="Edit" click="hardmenu_editClickedHandler(event)" />
	</s:actionContent>
	
</s:View>
